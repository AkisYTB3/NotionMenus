plugins {
    id 'com.gradleup.shadow' version '8.3.0'
    id 'java'
    id 'com.palantir.git-version' version '3.0.0'
}

group = project.group

def gitVersion = versionDetails()
def gitHash = gitVersion.gitHash.substring(0, 7)

version = project.version.toString().endsWith("-DEV") ?
        "${project.version}-${gitHash}" :
        project.version

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.papermc.io/repository/maven-public/' }
    maven { url 'https://oss.sonatype.org/content/groups/public/' }
    maven { url 'https://repo.nexomc.com/snapshots' }
    maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
    maven { url 'https://maven.devs.beer/' }
    maven { url 'https://repo.aikar.co/content/groups/aikar/' }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:${paperapi}")

    implementation("co.aikar:acf-paper:${paperacf}")

    // Adventure
    compileOnly("net.kyori:adventure-text-minimessage:${adventure}")
    compileOnly("net.kyori:adventure-text-serializer-ansi:${adventure}")
    compileOnly("net.kyori:adventure-text-serializer-gson:${adventure}")

    // Hooks n stuff
    compileOnly("com.nexomc:nexo:${nexomc}")
    compileOnly("me.clip:placeholderapi:${placeholderapi}")
    compileOnly("dev.lone:api-itemsadder:${itemsadder}")
    compileOnly "com.github.MilkBowl:VaultAPI:${vault}"
    compileOnly("net.md-5:bungeecord-chat:${bungee}")

    // Lombok
    compileOnly("org.projectlombok:lombok:${lombok}")
    annotationProcessor("org.projectlombok:lombok:${lombok}")
}

shadowJar {
    relocate 'co.aikar.commands', 'org.notionsmp.notionMenus.acf'
    relocate 'co.aikar.locales', 'org.notionsmp.notionMenus.locales'

    exclude('org.projectlombok:lombok:.*', 'net.kyori:.*')
    exclude 'META-INF/**'

    minimize()

    archiveClassifier.set('')
}

jar.enabled = false

tasks.build.dependsOn tasks.shadowJar

def targetJavaVersion = Integer.parseInt(project.targetJavaVersion)
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version.toString()]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching(['plugin.yml', 'paper-plugin.yml']) {
        expand props
    }
}

jar.dependsOn(shadowJar)